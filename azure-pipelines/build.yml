steps:
- script: |
    dotnet tool install --tool-path . nbgv
    .\nbgv cloud -p src
  displayName: Set build number
  condition: ne(variables['system.pullrequest.isfork'], true)
- task: PowerShell@2
  displayName: Set VSTS variables
  inputs:
    targetType: inline
    script: |
      if ($env:SignType -eq 'Real') {
        $feedGuid = '09d8d03c-1ac8-456e-9274-4d2364527d99'
      } else {
        $feedGuid = 'da484c78-f942-44ef-b197-99e2a1bef53c'
      }

      Write-Host "##vso[task.setvariable variable=feedGuid]$feedGuid"

      if ($env:ComputerName.StartsWith('factoryvm', [StringComparison]::OrdinalIgnoreCase)) {
        Write-Host "Running on hosted queue"
        Write-Host "##vso[task.setvariable variable=Hosted]true"
      }

      if ($env:SYSTEM_COLLECTIONID -eq '011b8bdf-6d56-4f87-be0d-0092136884d9') {
        Write-Host "Running on official devdiv account: $env:System_TeamFoundationCollectionUri"
      } else {
        Write-Host "Running under OSS account: $env:System_TeamFoundationCollectionUri"
      }

- ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
  - template: azure-pipeline.microbuild.before.yml

- task: DotNetCoreInstaller@0
  displayName: Install .NET Core SDK 2.1.300
  inputs:
    packageType: sdk
    version: 2.1.300

- script: dotnet --info
  displayName: Show dotnet SDK info

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    verbosityRestore: normal # detailed, normal, minimal
    projects: src/**/*.sln
    feedsToUse: config
    nugetConfigPath: src/nuget.config

# Use VSBuild to pack because `dotnet pack` can't sign packages with MicroBuild.
- task: VSBuild@1
  inputs:
    vsVersion: 15.0
    msbuildArgs: /t:build,pack /m /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
    platform: $(BuildPlatform)
    configuration: $(BuildConfiguration)
  displayName: Build Visual Studio solution

- task: DotNetCoreCLI@2
  displayName: Run tests
  inputs:
    command: test
    projects: src/**/*.Tests.csproj
    arguments: --configuration $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" -v n
  condition: and(succeeded(), ne(variables['SignType'], 'real'))

- task: CopyFiles@1
  inputs:
    Contents: |
      obj/**/project.assets.json
    TargetFolder: $(Build.ArtifactStagingDirectory)/projectAssetsJson
  displayName: Collecting project.assets.json artifacts
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/projectAssetsJson
    ArtifactName: projectAssetsJson
    ArtifactType: Container
  displayName: Publish projectAssetsJson artifacts
  condition: and(succeededOrFailed(), ne(variables['system.pullrequest.isfork'], true))

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
    ArtifactName: build_logs
    ArtifactType: Container
  displayName: Publish build_logs artifacts
  condition: and(succeededOrFailed(), ne(variables['system.pullrequest.isfork'], true))

## The rest of these steps are for deployment and skipped for PR builds

#- task: PublishBuildArtifacts@1
#  inputs:
#    PathtoPublish: $(build.sourcesdirectory)/bin
#    ArtifactName: bin
#    ArtifactType: Container
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['system.pullrequest.isfork'], true))

- powershell: >-
    $testdir="bin\Tests\$(BuildConfiguration)\net46\Microsoft.VisualStudio.Composition.Tests"

    & "$HOME\.nuget\packages\OpenCover\4.6.519\tools\OpenCover.Console.exe"
    -register:user
    -target:"$HOME\.nuget\packages\xunit.runner.console\2.2.0\tools\net452\xunit.console.x86.exe"
    -targetargs:"$testdir\Microsoft.VisualStudio.Composition.Tests.dll -noshadow -parallel all -notrait SkipInCodeCoverage=true -html $testdir\testresults.html -xml $testdir\testresults.xml -appveyor -nologo"
    -returntargetcode
    -excludebyattribute:*.ExcludeFromCodeCoverage*
    -excludebyfile:*\*Designer.cs
    -filter:"+[Nerdbank.Streams]*"
    -hideskipped:All
    -output:$testdir\code_coverage.xml

    $env:PATH = "C:\Python34;C:\Python34\Scripts;$env:PATH"

    pip install codecov

    codecov -f "$testdir\code_coverage.xml"
  displayName: Run tests on .NET Framework (with code coverage)

- ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
  - template: azure-pipeline.microbuild.after.yml

- task: CopyFiles@1
  inputs:
    Contents: |
      bin\$(BuildConfiguration)\Packages\Microsoft.VisualStudio.Composition.1*
      bin\$(BuildConfiguration)\Packages\Microsoft.VisualStudio.Composition.AppHost.1*
      bin\$(BuildConfiguration)\Packages\Microsoft.VisualStudio.Composition.NetFxAttributes.*
    TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
    flattenFolders: true
  displayName: Collecting deployables
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
    ArtifactName: deployables
    ArtifactType: Container
  displayName: Publish deployables artifacts
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['system.pullrequest.isfork'], true))
